name: CI-release-graalvm-ce-java15-linux-amd64-20.3.0-dev
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '10 */15 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Download labs-jdk-adm64
        id: jdk
        env:
          SUPER_SECRET: ${{ secrets.PAT }}
        run: |
          # jvmci-20.3-b06
          echo "export CI=jvmci-21.0-b03" > .env
          git add .env
          echo "export J=15.0.1" >> .env
          echo "export JAVA_HOME=$PWD/labsjdk-ce-$J-$CI" >> .env
          echo "export PATH=$JAVA_HOME/bin:$PATH" >> .env
          echo "export V=$J+9-$CI" >> .env
          wget https://github.com/graalvm/labs-openjdk-15/releases/download/$CI/labsjdk-ce-$V-linux-amd64.tar.gz
          tar -xf labsjdk-ce-$V-linux-amd64.tar.gz
          echo "export GRAALVM_COMMIT=$(curl --silent https://api.github.com/repos/oracle/graal/commits/master | jq .sha | xargs)" >> .env
          echo "export GRAALJS_COMMIT=$(curl --silent https://api.github.com/repos/graalvm/graaljs/commits/master | jq .sha | xargs)" >> .env
          echo GRAALVM-$(git rev-parse --short $GRAALVM_COMMIT)-GRAALJS-$(git rev-parse --short $GRAALJS_COMMIT) > COMMITS
          echo "::set-output name=commit::$(cat COMMITS)"
          echo "::set-output name=vm::21.0"
          echo "::set-output name=gv::21.0.0"
          echo "::set-output name=v::$V"
          echo "::set-output name=tagname::$V"
          echo "::set-output name=releasename::$V"
          cat COMMITS
          git config --global user.email "frank@dspeed.eu"
          git config --global user.name "Frank Lemanschik"
          git commit -am "$(cat ./COMMITS)" || exit 0
          git push https://frank-dspeed:$SUPER_SECRET@github.com/direktspeed/graalvm-stack
      - name: Create graalvm-ce-${{ steps.jdk.outputs.gv }}-${{ steps.graalvm.outputs.commit }}-jdk${{ steps.jdk.outputs.v }}-linux-amd64
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: vm-${{ steps.jdk.outputs.gv }}-${{ steps.jdk.outputs.commit }}-jdk${{ steps.jdk.outputs.v }}
          release_name: Release graalvm-ce-${{ steps.jdk.outputs.gv }}-${{ steps.jdk.outputs.commit }}-jdk${{ steps.jdk.outputs.v }}-linux-amd64
          draft: true
          prerelease: true
      
      #- name: Get Graal short Commit id
      #  id: graal-commit
      #  run: |
      #    git clone https://github.com/oracle/graal      
      #    cd graal
      #    echo "::set-output name=tag::$(git rev-parse --short HEAD)"      
      #- name: Get last GraalJS Commit
      #  id: graaljs-commit
      #  run: |
      #    git clone https://github.com/graalvm/graaljs
      #    cd graaljs
      #    echo "::set-output name=commit::$(git rev-parse --short HEAD)" 
      #- name: Clone https://github.com/graalvm/mx  
      #  id: git-clone-mx
      #  run: |
      #    git clone https://github.com/graalvm/mx
      #- name: git clone https://github.com/graalvm/graalpython
      #  id: git-clone-graalpython
      #  run: |
      #    git clone https://github.com/graalvm/graalpython         
      #- name: "Run: git clone https://github.com/oracle/truffleruby"
      #  id: git-clone-truffleruby
      #  run: |
      #    git clone https://github.com/oracle/truffleruby
      - name: "Run: mx --env ce build"
        id: build
        env: 
          VM: ${{ steps.jdk.outputs.vm }}
          JDK_VERSION: ${{ steps.jdk.outputs.v }}
        run: |
          export JAVA_HOME=$PWD/labsjdk-ce-$JDK_VERSION
          export PATH=$JAVA_HOME/bin:$PATH
          echo $JAVA_HOME 
          export PATH=$PWD/mx:$PATH
          export WORKING_DIR=$PWD
          #export BUILD_SUITE=ce
          export BUILD_SUITE=ce-no_native 
          export BUILD_EXTRA=graalvm-$BUILD_SUITE-java15 
          # graalvm-ce-no_native-java15 => GRAALVM_CE_NO_NATIVE_JAVA15
          export BUILD_EXTRA_UPPERCASE=$(echo $BUILD_EXTRA | sed -r 's/[-]+/_/g' | sed -e 's/\(.*\)/\U\1/')
          export BUILD_NAME=$BUILD_EXTRA-$VM-$(cat $WORKING_DIR/COMMITS)
          echo "::set-output name=name::$BUILD_NAME"
          cd graal
          export GRAAL_COMMIT=$(git rev-parse --short HEAD)
          cd vm
          ## This may checkout the old versions in the Suite.
          mx --env $BUILD_SUITE sforceimports
          ## last fully working suite git checkout 55b6687 20.3     
          # For example mx --env ce --exclude-components=gu build builds the "default CE" configuration except without gu. Or mx --env ce --exclude-components=gu graalvm-show shows you what it will build.        
          mx --env ce-no_native build
          cd ../sdk/mxbuild/linux-amd64
          mv $BUILD_EXTRA_UPPERCASE/*-dev $BUILD_NAME
          tar cvf - $BUILD_NAME | gzip -9 - > $WORKING_DIR/$BUILD_NAME-amd64.tgz
          cd $WORKING_DIR
      - name: Upload Build
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ steps.build.outputs.name }}-amd64.tgz
          asset_name: ${{ steps.build.outputs.name }}-amd64.tgz
          asset_content_type: application/gzip 
      - name: List all files from mxbuilds/* > release artifact
        id: build-find-artifacts
        run: |
          export COMMIT_HASH=$(cat COMMITS)
          find mx/mxbuild > release
          find graaljs/graal-nodejs/mxbuild >> release
          find graaljs/graal-js/mxbuild >> release
          find graal/sdk/mxbuild >> release
          find graal/vm/mxbuild >> release
          find graal/compiler/mxbuild >> release
          find graal/substratevm/mxbuild >> release
          find graal/regex/mxbuild >> release
          find graal/tools/mxbuild >> release
          find graal/truffle/mxbuild >> release
          find graal/sulong/mxbuild >> release
          export WORKING_DIR=$PWD
          cd graal
          export GRAAL_COMMIT=$(git rev-parse --short HEAD)
          ## Artifacts
          cd sdk/mxbuild/linux-amd64
          ls -l
          echo "#########################################"
      - name: Archive production artifact release
        uses: actions/upload-artifact@v2
        with:
          name: dist-file-list
          path: |
            release   
      #- name: Upload graalvm-ce-${{ steps.jdk.outputs.gv }}-${{ steps.graalvm.outputs.commit }}-jdk${{ steps.jdk.outputs.v }}-linux-amd64 Release
      #  id: upload-release-asset-ce
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #    asset_path: ./graalvm-ce-java15-linux-amd64-${{ steps.jdk.outputs.gv }}-${{ steps.graalvm.outputs.commit }}.tar.gz
      #    asset_name: graalvm-ce-java15-linux-amd64-${{ steps.jdk.outputs.gv }}-${{ steps.graalvm.outputs.commit }}.tar.gz
      #    asset_content_type: application/gzip
      
